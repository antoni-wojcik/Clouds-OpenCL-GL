// 1st KERNEL - CALCULATE CHANNEL DATA

__constant sampler_t sampler = CLK_NORMALIZED_COORDS_FALSE | CLK_ADDRESS_REPEAT | CLK_FILTER_NEAREST;

void kernel generate_channels(__read_only image3d_t vertices_ch_0, __read_only image3d_t vertices_ch_1, __read_only image3d_t vertices_ch_2, __read_only image3d_t vertices_ch_3, global const float* persistence, global const float* blending, __read_only image3d_t image_in, __write_only image3d_t image_out) {

    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    
    float4 brightness;
    
    int texture_size = get_image_width(image_in);
    
    // CHANNEL 0
    int nodes = get_image_width(vertices_ch_0);
    
    int grid_size = texture_size/(nodes-2);
    int3 node_loc = (int3)(x/grid_size+1, y/grid_size+1, z/grid_size+1);
    
    int min_dist = 3*grid_size*grid_size;
    
    for(int a = -1; a < 2; a++) for(int b = -1; b < 2; b++) for(int c = -1; c < 2; c++){
        int4 loc = (int4)(node_loc.x+a, node_loc.y+b, node_loc.z+c, 1);
        uint3 vertex_pixel = read_imageui(vertices_ch_0, sampler, loc).xyz;
        int3 pixel = (int3)(vertex_pixel.x + grid_size*(loc.x-1), vertex_pixel.y + grid_size*(loc.y-1), vertex_pixel.z + grid_size*(loc.z-1));
        int dist = (x-pixel.x)*(x-pixel.x) + (y-pixel.y)*(y-pixel.y) + (z-pixel.z)*(z-pixel.z);
        if(dist < min_dist) min_dist = dist;
    }
    
    brightness.x = 1.0f-tanh((float)((float)min_dist/(float)(3*grid_size*grid_size)*persistence[0]));

    // CHANNEL 1
    nodes = get_image_width(vertices_ch_1);
    
    grid_size = texture_size/(nodes-2);
    node_loc = (int3)(x/grid_size+1, y/grid_size+1, z/grid_size+1);
    
    min_dist = 3*grid_size*grid_size;
    
    for(int a = -1; a < 2; a++) for(int b = -1; b < 2; b++) for(int c = -1; c < 2; c++){
        int4 loc = (int4)(node_loc.x+a, node_loc.y+b, node_loc.z+c, 1);
        uint3 vertex_pixel = read_imageui(vertices_ch_1, sampler, loc).xyz;
        int3 pixel = (int3)(vertex_pixel.x + grid_size*(loc.x-1), vertex_pixel.y + grid_size*(loc.y-1), vertex_pixel.z + grid_size*(loc.z-1));
        int dist = (x-pixel.x)*(x-pixel.x) + (y-pixel.y)*(y-pixel.y) + (z-pixel.z)*(z-pixel.z);
        if(dist < min_dist) min_dist = dist;
    }
    
    brightness.y = 1.0f-tanh((float)((float)min_dist/(float)(3*grid_size*grid_size)*persistence[1]));
    
    // CHANNEL 2
    nodes = get_image_width(vertices_ch_2);
    
    grid_size = texture_size/(nodes-2);
    node_loc = (int3)(x/grid_size+1, y/grid_size+1, z/grid_size+1);
    
    min_dist = 3*grid_size*grid_size;
    
    for(int a = -1; a < 2; a++) for(int b = -1; b < 2; b++) for(int c = -1; c < 2; c++){
        int4 loc = (int4)(node_loc.x+a, node_loc.y+b, node_loc.z+c, 1);
        uint3 vertex_pixel = read_imageui(vertices_ch_2, sampler, loc).xyz;
        int3 pixel = (int3)(vertex_pixel.x + grid_size*(loc.x-1), vertex_pixel.y + grid_size*(loc.y-1), vertex_pixel.z + grid_size*(loc.z-1));
        int dist = (x-pixel.x)*(x-pixel.x) + (y-pixel.y)*(y-pixel.y) + (z-pixel.z)*(z-pixel.z);
        if(dist < min_dist) min_dist = dist;
    }
    
    brightness.z = 1.0f-tanh((float)((float)min_dist/(float)(3*grid_size*grid_size)*persistence[2]));
    
    // CHANNEL 3
    nodes = get_image_width(vertices_ch_3);
    
    grid_size = texture_size/(nodes-2);
    node_loc = (int3)(x/grid_size+1, y/grid_size+1, z/grid_size+1);
    
    min_dist = 3*grid_size*grid_size;
    
    for(int a = -1; a < 2; a++) for(int b = -1; b < 2; b++) for(int c = -1; c < 2; c++){
        int4 loc = (int4)(node_loc.x+a, node_loc.y+b, node_loc.z+c, 1);
        uint3 vertex_pixel = read_imageui(vertices_ch_3, sampler, loc).xyz;
        int3 pixel = (int3)(vertex_pixel.x + grid_size*(loc.x-1), vertex_pixel.y + grid_size*(loc.y-1), vertex_pixel.z + grid_size*(loc.z-1));
        int dist = (x-pixel.x)*(x-pixel.x) + (y-pixel.y)*(y-pixel.y) + (z-pixel.z)*(z-pixel.z);
        if(dist < min_dist) min_dist = dist;
    }
    
    brightness.w = 1.0f-tanh((float)((float)min_dist/(float)(3*grid_size*grid_size)*persistence[3]));
    
    // BLENDING
    
    if(blending[0] < 1.0f) brightness.x = blending[0] * brightness.x + (1.0f-blending[0]) * read_imagef(image_in, sampler, (int4)(x, y, z, 1)).x;
    if(blending[1] < 1.0f) brightness.y = blending[1] * brightness.y + (1.0f-blending[1]) * read_imagef(image_in, sampler, (int4)(x, y, z, 1)).y;
    if(blending[2] < 1.0f) brightness.z = blending[2] * brightness.z + (1.0f-blending[2]) * read_imagef(image_in, sampler, (int4)(x, y, z, 1)).z;
    if(blending[3] < 1.0f) brightness.w = blending[3] * brightness.w + (1.0f-blending[3]) * read_imagef(image_in, sampler, (int4)(x, y, z, 1)).w;
    
    // OUTPUT
        
    write_imagef(image_out, (int4)(x, y, z, 1), brightness);
}


// 2nd KERNEL - CALCULATE DENSITY AND LIGHT DATA

#define REPEATING

#define SIZE 1.0f
#define SAMPLE_SEP_LIGHT 0.01f
#define LIGHT_ABSORBTION 10.0f

#define CUTOFF 0.35f
#define CUTOFF_2 0.3f
#define SLOPE 40.0f

#ifdef REPEATING
__constant sampler_t sampler_norm = CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_REPEAT | CLK_FILTER_LINEAR;
#else
__constant sampler_t sampler_norm = CLK_NORMALIZED_COORDS_TRUE | CLK_ADDRESS_NONE | CLK_FILTER_LINEAR;
#endif

__constant float SIZE_INV = 1.0f / SIZE;

__constant float3 box_origin = (float3)(0.0f, 0.0f, 0.0f);
__constant float3 box_end = (float3)(SIZE, SIZE, SIZE);
__constant float3 light_dir = (float3)(0.4472f, 0.8944f, 0.0089f);

typedef struct {
    float3 start; //starting location
    float3 dir; //has to be normalized
    float param; //has to be set to 0 when initalized

    #ifndef REPEATING
    float3 dir_inv;
    #endif
} Ray;


Ray genLightRay(float3 start) {
    Ray r;
    r.start = start;
    r.dir = light_dir;
    r.param = 0.0f;
    
    #ifndef REPEATING
    r.dir_inv = (float3)(1.0f, 1.0f, 1.0f) / r.dir;
    #endif
    
    return r;
}

float3 currentRayPoint(Ray *r) {
    return (*r).start + (*r).dir * (*r).param;
}

#ifdef REPEATING
float distToTop(Ray *r) {
    return (box_end.y - (*r).start.y) / (*r).dir.y;
}

#else

float distInBox(Ray *r) {
    float3 t1 = (box_origin - (*r).start) * (*r).dir_inv;
    float3 t2 = (box_end - (*r).start) * (*r).dir_inv;
    float3 t_min = min(t1, t2);
    float3 t_max = max(t1, t2);
    
    float param1 = max(max(t_min.x, t_min.y), t_min.z);
    float param2 = min(t_max.x, min(t_max.y, t_max.z));
    
    float dist_to_box = max(0.0f, param1);
    float dist_inside_box = max(0.0f, param2 - dist_to_box);
    
    return dist_inside_box;
}
#endif

float smoothFactor(float x) {
    float y = x * (1.0f - x) * 4.0f;
    return y;
}

float sampleDensity(image3d_t image_in, float3 loc) {
    float4 loc4 = (float4)(loc.x, loc.y, loc.z, 1.0f);
    float4 channel_data = read_imagef(image_in, sampler_norm, loc4);
    
    float density = smoothFactor(loc.y)*(channel_data.x * 0.03f + channel_data.y * 0.7f + channel_data.z * 0.2f + channel_data.w * 0.07f);
    
    if(density < CUTOFF) {
        density = (tanh((density - CUTOFF_2) * SLOPE) + 1.0f) * 0.5f * CUTOFF;
        if(density < 0.0001f) return 0.0f;
    }
    return density;
}

float addDensity(float density, float sub_dist) {
    return density * sub_dist * SIZE_INV;
}

float calcLight(image3d_t *image_in, float3 start) {
    
    Ray r_light = genLightRay(start);
    
    #ifdef REPEATING
    float dist_edge = distToTop(&r_light);
    #else
    float dist_edge = distInBox(&r_light);
    #endif
    
    float inv_cos_angle = 1.0f / dot(r_light.dir, light_dir);
    float sub_dist = SAMPLE_SEP_LIGHT * inv_cos_angle;
    float dist = 0.0f;
    
    float dens_tot = 0.0f;
    
    while(dist <= dist_edge) {
        float data_point = sampleDensity(*image_in, currentRayPoint(&r_light));
        dens_tot += addDensity(data_point, sub_dist);
        
        r_light.param += sub_dist;
        dist += sub_dist;
    }
    
    return exp(-dens_tot * LIGHT_ABSORBTION);
}

void kernel generate_density(__read_only image3d_t image_in, __write_only image3d_t image_out) {
    int x = get_global_id(0);
    int y = get_global_id(1);
    int z = get_global_id(2);
    
    float size_inv = 1.0f / (float)(get_image_width(image_in));
    
    float3 loc = (float3)((float)(x) * size_inv, (float)(y) * size_inv, (float)(z) * size_inv);
    
    float density = sampleDensity(image_in, loc);
    
    float light = calcLight(&image_in, loc);
    
    write_imagef(image_out, (int4)(x, y, z, 1), (float4)(density, light, 0.0f, 1.0f));
}
